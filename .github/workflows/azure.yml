name: 'Terraform'

on: 
  pull_request:
    branches:
      - main
    paths: 
      - 'azure/' 

jobs:
  terraform:
    name: 'Azure Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: azure/

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      env:
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        TENANT_ID: ${{ secrets.TENANT_ID }}
        SUB_ID: ${{ secrets.SUB_ID }}
      run: terraform init 


    # Run a terraform plan for pull requests only
    - name: Terraform Plan

      id: plan
      env:
        CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        SUB_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
    

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
    #   needs: ["Terraform Plan"]
      env:
        CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        SUB_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform apply -auto-approve